/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HRL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 38 37>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_parentheses {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            layers = <0>;
        };

        right_parentheses {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 22>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 20>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <15 14>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 20>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <15 16>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <10 9>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <18 19>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <17 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&none  &kp Q              &kp W            &kp E                &kp R                &kp T          &kp Y            &kp U                 &kp I                     &kp O             &kp P                       &none
&none  &hrl LEFT_SHIFT A  &hrl LEFT_ALT S  &hrl LEFT_COMMAND D  &hrl LEFT_CONTROL F  &kp G          &kp H            &hmr RIGHT_CONTROL J  &hmr RIGHT_COMMAND K      &hmr RIGHT_ALT L  &hmr RIGHT_SHIFT SEMICOLON  &none
&none  &kp Z              &kp X            &kp C                &kp V                &kp B          &kp N            &kp M                 &kp COMMA                 &kp DOT           &kp QUESTION                &none
                                           &kp ESC              &kp TAB              &lt 1 SPACE    &lt 2 BACKSPACE  &kp DELETE            &kp LS(LC(LG(LEFT_ALT)))
            >;

            label = "Default";
        };

        lower {
            bindings = <
&none  &kp EXCLAMATION  &kp AT           &kp HASH         &kp DOLLAR       &kp PERCENT        &kp CARET        &kp AMPERSAND     &kp ASTERISK       &kp UNDER        &kp KP_EQUAL     &none
&none  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5    &kp KP_NUMBER_6  &kp KP_NUMBER_7   &kp KP_NUMBER_8    &kp KP_NUMBER_9  &kp KP_NUMBER_0  &none
&none  &kp TILDE        &kp GRAVE        &trans           &kp PIPE         &kp KP_MINUS       &kp KP_PLUS      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp KP_DIVIDE    &kp BACKSLASH    &none
                                         &trans           &trans           &trans             &trans           &trans            &trans
            >;

            label = "Lower";
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp K_PLAY_PAUSE  &kp K_STOP  &kp K_PREV  &kp K_NEXT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT          &kp DOWN    &kp UP      &kp RIGHT   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans            &trans      &trans      &trans      &trans
                        &trans  &trans  &trans    &trans  &trans            &trans
            >;
        };
    };
};
